//==================================================================
// 《剑指Offer》代码
//==================================================================

// 面试题64：求1+2+…+n
// 题目：求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case
// 等关键字及条件判断语句（A?B:C）。

#include <iostream>
using namespace std;

//*******************************************************************//
//--------------------方法1：基于构造函数实现循环--------------------//
//*******************************************************************//
class Temp
{
public:
	Temp() { N++; Sum += N; }				//在构造函数中实现递增
	static int GetSum() { return Sum; }		//静态成员函数与具体的对象无关

private:
	static int N;		//静态成员变量
	static int Sum;
};

int Temp::N = 0;		//静态成员变量需要利用类名初始化，所有对象共享
int Temp::Sum = 0;

int Solution1(int n)
{
	Temp *temp = new Temp[n];		//定义n个temp对象，调用n次构造函数实现求和
	delete[] temp;					//删除动态分配的空间
	temp = nullptr;

	return Temp::GetSum();			//返回Sum的值
}

//*******************************************************************//
//------------------方法2：基于虚函数和多态实现递归------------------//
//*******************************************************************//
class A		//基类
{
public:
	virtual int Sum(int n) { return 0; }	//基类的Sum函数直接返回0作为递归的终止条件，定义为虚函数
};

A* Array[2];		//定义两个基类指针变量

class B : public A		//由基类A派生出子类B
{
public:
	virtual int Sum(int n) { return Array[!!n]->Sum(n - 1) + n; }	//子类B的Sum函数实现递增求和
	//当n>0时，!!n的值为1；当n=0时，!!n的值为0，从而实现函数的切换
};

int Solution2(int n)
{
	A a;	//基类对象A
	B b;	//派生类对象B
	Array[0] = &a;		//基类指针指向基类对象的引用
	Array[1] = &b;		//基类指针指向派生类对象的引用

	return Array[1]->Sum(n);	//一开始调用子类的Sum函数
}

//*******************************************************************//
//--------------------方法3：基于函数指针实现递归--------------------//
//*******************************************************************//
typedef int(*fun)(int);		//用typedef声明函数指针类型

int Solution3_Teminator(int n) { return 0; }	//直接返回0作为递归的终止条件

int Solution3(int n)	//实现递增求和
{ 
	fun f[2] = { Solution3_Teminator, Solution3 };	//两个函数指针组成一个数组，下标分别为0和1
	return f[!!n](n - 1) + n; 
	//当n>0时，!!n的值为1；当n=0时，!!n的值为0，从而实现函数的切换
}

//*******************************************************************//
//-------------------------------主函数------------------------------//
//*******************************************************************//
int main()
{
	int n = 4;
	cout << "sum1 = " << Solution1(n) << endl;
	cout << "sum2 = " << Solution2(n) << endl;
	cout << "sum3 = " << Solution3(n) << endl;
}