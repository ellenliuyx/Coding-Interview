//==================================================================
// 《剑指Offer》代码
//==================================================================

// 面试题50（二）：字符流中第一个只出现一次的字符
// 题目：请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从
// 字符流中只读出前两个字符"go"时，第一个只出现一次的字符是'g'。当从该字
// 符流中读出前六个字符"google"时，第一个只出现一次的字符是'l'。

#include <iostream>
using namespace std;

//**********************************************************************//
//------------------------------字符统计类------------------------------//
//**********************************************************************//
class CharStatistic
{
public:
	CharStatistic();			//构造函数，用于初始化index和occurance
	void Insert(char ch);		//插入字符函数
	char FirstAppearingOnce();	//求第一个只出现一次的字符函数
private:
	int occurance[256];			//统计每个只出现一次的字符出现的位置
	int index;					//目前的字符在字符串中的位置
};

//**********************************************************************//
//-------------------------------构造函数-------------------------------//
//**********************************************************************//
CharStatistic::CharStatistic():index(0)
{
	for (int i = 0; i < 256; i++)
	{
		occurance[i] = -1;			//occurance初始化为-1，表示所有的字符均未出现过
	}
}

//**********************************************************************//
//-----------------------------插入字符函数-----------------------------//
//**********************************************************************//
void CharStatistic::Insert(char ch)
{
	if (occurance[(int)ch] == -1)			//若该字符未出现过，则记录下第一次出现的位置
	{
		occurance[(int)ch] = index;
	}
	else if (occurance[(int)ch] >= 0)		//若该字符以前出现过一次，则将occurance置为-2，表示出现次数超过了一次
	{
		occurance[(int)ch] = -2;
	}
	index++;
}

//**********************************************************************//
//---------------------求第一个只出现一次的字符函数---------------------//
//**********************************************************************//
char CharStatistic::FirstAppearingOnce()
{
	int min = numeric_limits<int>::max();		//将min置为编译器允许的最大int型数
	char result = '\0';

	for (int i = 0; i < 256; i++)				//遍历occurance数组
	{
		if (occurance[i] >= 0 && occurance[i] < min)	//若该字符只出现过一次，且出现的位置小于min，则替换min和result
		{
			min = occurance[i];
			result = (char)(i);
		}
	}
	return result;
}

//**********************************************************************//
//--------------------------------主函数--------------------------------//
//**********************************************************************//
int main()
{
	CharStatistic chars;
	char result;

	//-----插入'g'-----//
	chars.Insert('g');
	cout << "插入字符 g" << endl;
	cout << "第一个只出现一次的字符是：" << chars.FirstAppearingOnce() << endl;

	//-----插入'o'-----//
	chars.Insert('o');
	cout << "插入字符 o" << endl;
	cout << "第一个只出现一次的字符是：" << chars.FirstAppearingOnce() << endl;
	
	//-----插入'o'-----//
	chars.Insert('o');
	cout << "插入字符 o" << endl;
	cout << "第一个只出现一次的字符是：" << chars.FirstAppearingOnce() << endl;

	//-----插入'g'-----//
	chars.Insert('g');
	cout << "插入字符 g" << endl;
	cout << "第一个只出现一次的字符是：" << chars.FirstAppearingOnce() << endl;

	//-----插入'l'-----//
	chars.Insert('l');
	cout << "插入字符 l" << endl;
	cout << "第一个只出现一次的字符是：" << chars.FirstAppearingOnce() << endl;

	//-----插入'e'-----//
	chars.Insert('e');
	cout << "插入字符 e" << endl;
	cout << "第一个只出现一次的字符是：" << chars.FirstAppearingOnce() << endl;

	return 0;
}