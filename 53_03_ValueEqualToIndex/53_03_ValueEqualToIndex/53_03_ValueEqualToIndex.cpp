//==================================================================
// 《剑指Offer》代码
//==================================================================

// 面试题53（三）：数组中数值和下标相等的元素
// 题目：假设一个单调递增的数组里的每个元素都是整数并且是唯一的。请编程实
// 现一个函数找出数组中任意一个数值等于其下标的元素。例如，在数组{-3, -1,
// 1, 3, 5}中，数字3和它的下标相等。

#include <iostream>
#include <assert.h>
using namespace std;

//********************************************************************//
//------------------------求值与下标相等的元素------------------------//
//********************************************************************//
int GetValueEqualToIndex(int* array, int length)
{
	assert(array != nullptr && length != 0);		//非法输入

	int start = 0, end = length - 1;
	int middle;

	while (start <= end)		//只要区间的头尾没有相遇，就继续循环
	{
		middle = (start + end) >> 1;
		if (array[middle] == middle)		//若当前元素值与下标相等，则返回当前元素
			return middle;
		else if (array[middle] > middle)	//若当前元素值比下标大，则继续查找前半段元素
			end = middle - 1; 
		else								//若当前元素值比下标小，则继续查找后半段元素
			start = middle + 1;
	}
	return -1;					//若循环结束都未找到符合要求的元素，则返回-1
}

//********************************************************************//
//---------------测试用例1：值与下标相等的元素在数组中间--------------//
//********************************************************************//
void Test1()
{
	const int length = 6;
	int array[length] = { -5,-3,-1,3,5,8 };
	if (GetValueEqualToIndex(array, length) >= 0)
		cout << "值与下标相等的元素为：" << GetValueEqualToIndex(array, length) << endl << endl;
	else
		cout << "值与下标相等的元素不存在" << endl << endl;
}

//********************************************************************//
//---------------测试用例2：值与下标相等的元素在数组开头--------------//
//********************************************************************//
void Test2()
{
	const int length = 6;
	int array[length] = { 0,2,4,6,8,9 };
	if (GetValueEqualToIndex(array, length) >= 0)
		cout << "值与下标相等的元素为：" << GetValueEqualToIndex(array, length) << endl << endl;
	else
		cout << "值与下标相等的元素不存在" << endl << endl;
}

//********************************************************************//
//---------------测试用例3：值与下标相等的元素在数组末尾--------------//
//********************************************************************//
void Test3()
{
	const int length = 6;
	int array[length] = { -9,-7,-5,-3,-1,5 };
	if (GetValueEqualToIndex(array, length) >= 0)
		cout << "值与下标相等的元素为：" << GetValueEqualToIndex(array, length) << endl << endl;
	else
		cout << "值与下标相等的元素不存在" << endl << endl;
}

//********************************************************************//
//-------------测试用例4：值与下标相等的元素在数组中不存在------------//
//********************************************************************//
void Test4()
{
	const int length = 6;
	int array[length] = { 1,2,3,4,5,6 };
	if (GetValueEqualToIndex(array, length) >= 0)
		cout << "值与下标相等的元素为：" << GetValueEqualToIndex(array, length) << endl << endl;
	else
		cout << "值与下标相等的元素不存在" << endl << endl;
}

//********************************************************************//
//---------------测试用例5：单元素数组且符合值与下标相等--------------//
//********************************************************************//
void Test5()
{
	const int length = 1;
	int array[length] = { 0 };
	if (GetValueEqualToIndex(array, length) >= 0)
		cout << "值与下标相等的元素为：" << GetValueEqualToIndex(array, length) << endl << endl;
	else
		cout << "值与下标相等的元素不存在" << endl << endl;
}

//********************************************************************//
//-----------------------测试用例6：数组为空指针----------------------//
//********************************************************************//
void Test6()
{
	const int length = 0;
	int *array = nullptr;
	if (GetValueEqualToIndex(array, length) >= 0)
		cout << "值与下标相等的元素为：" << GetValueEqualToIndex(array, length) << endl;
	else
		cout << "值与下标相等的元素不存在" << endl << endl;
}

//********************************************************************//
//-------------------------------主函数-------------------------------//
//********************************************************************//
int main()
{
	Test1();
	Test2();
	Test3();
	Test4();
	Test5();
	Test6();
	return 0;
}