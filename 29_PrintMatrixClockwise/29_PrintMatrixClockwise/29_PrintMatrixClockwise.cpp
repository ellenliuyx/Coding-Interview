//==================================================================
// 《剑指Offer》代码
//==================================================================

// 面试题29：顺时针打印矩阵
// 题目：输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

#include <iostream>
using namespace std;

//************************************************************************************//
//-------------------------------从左向右打印矩阵的一行-------------------------------//
//************************************************************************************//
void PrintRight(int** matrix, int rows, int columns, int start)
{
	for (int i = start; i < columns - start; i++)
	{
		cout << matrix[start][i] << "\t";
	}
}

//************************************************************************************//
//-------------------------------从上向下打印矩阵的一列-------------------------------//
//************************************************************************************//
void PrintDown(int** matrix, int rows, int columns, int start)
{
	for (int i = start + 1; i < rows - start; i++)
	{
		cout << matrix[i][columns - start - 1] << "\t";
	}
}

//************************************************************************************//
//-------------------------------从右向左打印矩阵的一行-------------------------------//
//************************************************************************************//
void PrintLeft(int** matrix, int rows, int columns, int start)
{
	for (int i = columns - start - 2; i >= start; i--)
	{
		cout << matrix[rows - start - 1][i] << "\t";
	}
}

//************************************************************************************//
//-------------------------------从下向上打印矩阵的一列-------------------------------//
//************************************************************************************//
void PrintUp(int** matrix, int rows, int columns, int start)
{
	for (int i = rows - start - 2; i > start; i--)
	{
		cout << matrix[i][start] << "\t";
	}
}

//************************************************************************************//
//------------按照向右向下向左向上的顺序打印矩阵从(start, start)开始的一圈------------//
//************************************************************************************//
void PrintOneCircle(int** matrix, int rows, int columns, int start)
{
	PrintRight(matrix, rows, columns, start);			//从左向右打印矩阵的一行
	if (start < rows - start - 1)
	{
		PrintDown(matrix, rows, columns, start);		//从上向下打印矩阵的一列
		if (start < columns - start - 1)
		{
			PrintLeft(matrix, rows, columns, start);	//从右向左打印矩阵的一行
			if (start < rows - start - 2)
			{
				PrintUp(matrix, rows, columns, start);	//从下向上打印矩阵的一列
			}	
		}	
	}
}

//************************************************************************************//
//-------------------------------顺时针从外向里打印矩阵-------------------------------//
//************************************************************************************//
void PrintMatrixClockwise(int** matrix, int rows, int columns)
{
	if (matrix == nullptr || rows == 0 || columns == 0)		//非法输入
	{
		cout << "矩阵为空矩阵" << endl;
		return;
	}

	for (int start = 0; start * 2 < rows && start * 2 < columns; start++)		//打印矩阵的一圈
	{
		cout << "第 " << start << " 圈：" <<endl;
		PrintOneCircle(matrix, rows, columns, start);
		cout << endl;
	}
}

//************************************************************************************//
//--------------------------------------测试函数--------------------------------------//
//************************************************************************************//
void Test(int rows, int columns)
{
	int** matrix = (int**)malloc(sizeof(int*)*rows);		//为二维矩阵动态开辟内存
	for (int i = 0; i < rows; i++)
	{
		matrix[i] = (int*)malloc(sizeof(int) * columns);
	}

	cout << "按行列打印矩阵：" << endl;
	int number = 0;
	for (int i = 0; i < rows; i++)							//二维矩阵初始化并打印
	{
		for (int j = 0; j < columns; j++)
		{
			number++;
			matrix[i][j] = number;
			cout << matrix[i][j] << "\t";
		}
		cout << endl;
	}

	cout << "顺时针打印矩阵：" << endl;
	PrintMatrixClockwise(matrix, rows, columns);			//顺时针打印二维矩阵
	cout << endl;

	for (int i = 0; i < rows; i++)							//释放二维矩阵内存
	{
		free(matrix[i]);
	}
	free(matrix);
}

//************************************************************************************//
//---------------------------------------主函数---------------------------------------//
//************************************************************************************//
int main()
{
	Test(0, 0);		//测试用例1：空矩阵
	Test(3, 3);		//测试用例2：3行3列矩阵（最后一圈只有从左向右1步，且该步只有一个点）
	Test(3, 4);		//测试用例6：3行3列矩阵（最后一圈只有从左向右1步）
	Test(5, 3);		//测试用例5：3行3列矩阵（最后一圈只有从左向右、从上向下2步）
	Test(4, 5);		//测试用例4：4行5列矩阵（最后一圈只有从左向右、从上向下、从右向左3步）
	Test(4, 4);		//测试用例3：4行4列矩阵（最后一圈有从左向右、从上向下、从右向左、从下向上4步）
}