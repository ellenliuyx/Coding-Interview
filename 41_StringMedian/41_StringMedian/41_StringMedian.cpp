//==================================================================
// 《剑指Offer》代码
//==================================================================

// 面试题41：数据流中的中位数
// 题目：如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么
// 中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，
// 那么中位数就是所有数值排序之后中间两个数的平均值。

#include <vector>
#include <assert.h>
#include <iostream>
#include <algorithm>		//push_heap和pop_heap函数用到的头文件
using namespace std;

//****************************************************************************************//
//---------------------------------------动态数组类---------------------------------------//
//****************************************************************************************//
template <typename T> class DynamicArray
{
public:
	void Insert(T value);		//插入数据函数
	T GetMedian();				//获得中位数函数
private:
	vector<T> min;				//小顶堆，存放中位数之后的数据
	vector<T> max;				//大顶堆，存放中位数之前的数据
};

//****************************************************************************************//
//-----------------------------动态数组类（插入数据函数定义）-----------------------------//
//****************************************************************************************//
template <typename T> void DynamicArray<T>::Insert(T value)
{
	int numberCount = min.size() + max.size();
	if ((numberCount & 1) == 0)	//偶数个数据，插入小顶堆
	{
		if (max.size() > 0 && value < max[0])		//若数据小于大顶堆的最大值
		{
			//将数据插入大顶堆并排序
			max.push_back(value);							//数据插入大顶堆数组尾部
			push_heap(max.begin(), max.end(), less<T>());	//大顶堆重新排序（最大值在第一个元素位置）
			
			value = max[0];		//取出此时大顶堆的最大值
			
			//将大顶堆的最大值弹出
			pop_heap(max.begin(), max.end(), less<T>());	//大顶堆最大值调到最后一个元素位置
			max.pop_back();									//弹出数组尾部数据
		}
		//将输入元素或者大顶堆的最大值插入小顶堆
		min.push_back(value);
		push_heap(min.begin(), min.end(), greater<T>());
	}
	else						//奇数个数据，插入大顶堆
	{
		if (min.size() > 0 && value > min[0])		//若数据大于小顶堆的最小值
		{
			//将数据插入小顶堆并排序
			min.push_back(value);
			push_heap(min.begin(), min.end(), greater<T>());

			value = min[0];		//取出此时小顶堆的最小值

			//将小顶堆的最小值弹出
			pop_heap(min.begin(), min.end(), greater<T>());
			min.pop_back();
		}
		//将输入元素或者小顶堆的最小值插入大顶堆
		max.push_back(value);
		push_heap(max.begin(), max.end(), less<T>());
	}
};

//****************************************************************************************//
//----------------------------动态数组类（获得中位数函数定义）----------------------------//
//****************************************************************************************//
template <typename T> T DynamicArray<T>::GetMedian()
{
	int numberCount = min.size() + max.size();
	assert(numberCount != 0);			//数组为空时，无法求中位数

	if (numberCount & 1)				//数组大小为奇数
		return min[0];
	else								//数组大小为偶数
		return (min[0] + max[0]) / 2;
};

//****************************************************************************************//
//-----------------------------------------主函数-----------------------------------------//
//****************************************************************************************//
int main()
{
	DynamicArray<double> DataInput;		//定义一个DynamicArray<double>类型对象

	const int length = 7;
	double number[length] = { 2,3,5,6,1,4,7 };		//数据流

	for (int i = 0; i < length; i++)				//循环执行插入和求中位数操作，直到数据流结束
	{
		DataInput.Insert(number[i]);
		cout << "插入数字：" << number[i] << endl;
		cout << "中位数为：" << DataInput.GetMedian() << endl << endl;
	}
	return 0;
}