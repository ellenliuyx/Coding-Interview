//==================================================================
// 《剑指Offer》代码
//==================================================================

// 面试题62：圆圈中最后剩下的数字
// 题目：0, 1, …, n-1这n个数字排成一个圆圈，从数字0开始每次从这个圆圈里
// 删除第m个数字。求出这个圆圈里剩下的最后一个数字。

#include <iostream>
#include <assert.h>
#include <list>
using namespace std;

//********************************************************************//
//-----------------利用环形链表求圆环中最后剩下的数字-----------------//
//********************************************************************//
int LastRemain_List(int n, int m)
{
	assert(n > 0 && m > 0);

	list<int> myList;		//环形链表对象

	for (int i = 0; i < n; i++)		//初始化为0~n-1的数字
		myList.push_back(i);

	list<int>::iterator itr = myList.begin();		//环形链表中的迭代器
	while (myList.size() > 1)						//当链表中只剩下一个元素时，停止循环
	{
		for (int i = 1; i < m; i++)					//沿环形链表找到第m个元素
		{
			itr++;
			if (itr == myList.end())				//若到达尾部，则迭代器移植头部
				itr = myList.begin();
		}
		list<int>::iterator temp = itr;				//记录下第m个元素的位置，并删除
		itr++;
		if (itr == myList.end())
			itr = myList.begin();
		myList.erase(temp);
	}
	return *itr;			//当环中只剩一个元素时，返回该元素的值
}

//********************************************************************//
//-----------------利用数学推导求圆环中最后剩下的数字-----------------//
//当n=1时，f(n,m) = 0；当n>1时，f(n,m) = [f(n-1,m)+m]%n
//********************************************************************//
int LastRemain_Math(int n, int m)
{
	assert(n > 0 && m > 0);

	int result = 0;
	for (int i = 2; i <= n; i++)
	{
		result = (result + m) % i;
	}
	return result;
}

//********************************************************************//
//---------------测试函数1：长为5的圆环每次删掉第3个数字--------------//
//********************************************************************//
void Test1()
{
	int n = 5, m = 3;
	cout << "长度为 " << n << " 的约瑟夫环，每次删掉第 " << m << " 个元素" << endl;
	cout << "（环形链表法）剩下的最后一个数字是：" << LastRemain_List(n, m) << endl;
	cout << "（数学推导法）剩下的最后一个数字是：" << LastRemain_Math(n, m) << endl;
}

//********************************************************************//
//---------------测试函数2：长为5的圆环每次删掉第2个数字--------------//
//********************************************************************//
void Test2()
{
	int n = 5, m = 2;
	cout << "长度为 " << n << " 的约瑟夫环，每次删掉第 " << m << " 个元素" << endl;
	cout << "（环形链表法）剩下的最后一个数字是：" << LastRemain_List(n, m) << endl;
	cout << "（数学推导法）剩下的最后一个数字是：" << LastRemain_Math(n, m) << endl;
}

//********************************************************************//
//---------------测试函数3：长为6的圆环每次删掉第7个数字--------------//
//********************************************************************//
void Test3()
{
	int n = 6, m = 7;
	cout << "长度为 " << n << " 的约瑟夫环，每次删掉第 " << m << " 个元素" << endl;
	cout << "（环形链表法）剩下的最后一个数字是：" << LastRemain_List(n, m) << endl;
	cout << "（数学推导法）剩下的最后一个数字是：" << LastRemain_Math(n, m) << endl;
}

//********************************************************************//
//---------------测试函数4：长为6的圆环每次删掉第6个数字--------------//
//********************************************************************//
void Test4()
{
	int n = 6, m = 6;
	cout << "长度为 " << n << " 的约瑟夫环，每次删掉第 " << m << " 个元素" << endl;
	cout << "（环形链表法）剩下的最后一个数字是：" << LastRemain_List(n, m) << endl;
	cout << "（数学推导法）剩下的最后一个数字是：" << LastRemain_Math(n, m) << endl;
}

//********************************************************************//
//------------测试函数5：长为4000的圆环每次删掉第997个数字------------//
//********************************************************************//
void Test5()
{
	int n = 4000, m = 997;
	cout << "长度为 " << n << " 的约瑟夫环，每次删掉第 " << m << " 个元素" << endl;
	cout << "（环形链表法）剩下的最后一个数字是：" << LastRemain_List(n, m) << endl;
	cout << "（数学推导法）剩下的最后一个数字是：" << LastRemain_Math(n, m) << endl;
}

//********************************************************************//
//-------------------------------主函数-------------------------------//
//********************************************************************//
int main()
{
	Test1();
	Test2();
	Test3();
	Test4();
	Test5();
	return 0;
}